1: AULA 03 : instalar 
npm init -y , npm install -d nodemon, npm install graphql apollo-server

2: no package.json criar um script: "start" : "nodemon"

3: criar o index.js, com as configurações básicas

4:AULA 04: Type scalar:
Int, Float, String, Boolean, ID

5: npm start vai abrir o apollo-sever na porta 4000 e la tem m playground pra fazer as querys 

6: no typeDefs eu insiro um contexto de tipos como se fosse um interface e no resolvers eu insiro os dados que serão chamados na query do apollo server

7:AULA 05: Quando usar Array no typeDefs com um '!' ele não pode ser nulo e no results é obrigatoriamente retornar um valor e no  array pelo menos vazio []

8: AULA 06: Criando schemas que são modelos pra ser chamados do Query de fomra mais simples e terem seus valores preechidos no resovers, tambem instanciamos os usuarios e produtois em arrays pra serem chamados no resolvers de forma mais limpa, mudando a sintaxe de simplesmente pondo em plural add "[]" aos modelos

8: AULA 07: passei um segundo argumento em usuario(_, args) com ele posso retornar uma função pra buscar no Array usuarios um ID expessífico ou nome expessífico depende dos parâmetros passados na Query

9: dentro de usuario() criei uma condicional pra buscar o nome caso não encontre o ID

10: revisei o conceito fazendo a mesma coisa com a lista de produtos

11:AULA 08: instanciei uma nova propriedade chamada db passei o typeDefs dela Users com todas as propriedades tipando cada uma delas, em seguida fui em, type Query e disse que usuario: user recebe o tipo User e por ultimo no resolvers retornei o usuario() o db.

12: quando a propriedade que está na base de dados, tem divergencia ou ausencia em relação aos typeDefs, eu chamo no resolvers o objeto em questão a dentro dele a propriedade que está retornando nula e dou um retunr na propriedade com os dados que eu quero adicionar ou passo o obj como parâmetro da propriedade telefone(obj) pra depois associar com a propriedade que eu quiser return obj.telefone_fixo

13: adicionei perfil como uma nova propriedade de usuario, depois instaciei em um array perfis associando o id a descrição, depois crio um type query  e associo perfis:[Perfil] ou os dados a tipagem e tambem perfil:Perfil no type User pra fazer uma bifurcação de objetos

14: criei um args no segundo parâmetro de usuario no resolvers com o metodo .find() juntamente com criei no type query o usuario(id:Int): User